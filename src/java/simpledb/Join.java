package simpledb;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

    private static final long serialVersionUID = 1L;
    private JoinPredicate joinPredicate;
    private OpIterator childOp1;
    private OpIterator childOp2;
    private Tuple tuple1;

    /**
     * Constructor. Accepts two children to join and the predicate to join them
     * on
     *
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate p, OpIterator child1, OpIterator child2) {
        this.joinPredicate = p;
        this.childOp1 = child1;
        this.childOp2 = child2;
        this.tuple1 = null;
    }

    public JoinPredicate getJoinPredicate() {
        return this.joinPredicate;
    }

    /**
     * @return
     *       the field name of join field1. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField1Name() {
        return this.childOp1.getTupleDesc().getFieldName(this.joinPredicate.getField1());
    }

    /**
     * @return
     *       the field name of join field2. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField2Name() {
        return this.childOp2.getTupleDesc().getFieldName(this.joinPredicate.getField2());
    }

    /**
     * @see simpledb.TupleDesc#merge(TupleDesc, TupleDesc) for possible
     *      implementation logic.
     */
    public TupleDesc getTupleDesc() {
        return TupleDesc.merge(this.childOp1.getTupleDesc(), this.childOp2.getTupleDesc());
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        super.open();
        this.childOp1.open();
        this.childOp2.open();
        if (this.childOp1.hasNext()) {
            this.tuple1 = this.childOp1.next();
        }
    }

    public void close() {
        super.close();
        this.childOp1.close();
        this.childOp2.close();
        this.tuple1 = null;
    }

    public void rewind() throws DbException, TransactionAbortedException {
        // close();
        // open();
        this.childOp1.rewind();
        this.childOp2.rewind();
        if (this.childOp1.hasNext()) {
            this.tuple1 = this.childOp1.next();
        }
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     *
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        // nested loops join
        // for each tuple in R1
        while (this.tuple1 != null) {
            // for each tuple in R2
            while (this.childOp2.hasNext()) {
                Tuple tuple2 = this.childOp2.next();
                // if we found match, merge them
                if (this.joinPredicate.filter(tuple1, tuple2)) {
                    Tuple merged = new Tuple(this.getTupleDesc());
                    // set the fields in tuple
                    int numFieldsTuple1 = this.childOp1.getTupleDesc().numFields();
                    int numFieldsTuple2 = this.childOp2.getTupleDesc().numFields();
                    for (int i = 0; i < numFieldsTuple1; i++) {
                        merged.setField(i, tuple1.getField(i));
                    }
                    for (int i = 0; i < numFieldsTuple2; i++) {
                        merged.setField(i + numFieldsTuple1, tuple2.getField(i));
                    }
                    merged.setRecordId(tuple1.getRecordId());
                    return merged;
                }
            }
            // rewind to prepare to compare all tuples of R2 with next tuple of R1
            if (this.childOp1.hasNext()) {
                this.tuple1 = this.childOp1.next();
                this.childOp2.rewind();
            } else {
                return null;
            }
        }
        return null;
    }

    @Override
    public OpIterator[] getChildren() {
        return new OpIterator[]{this.childOp1, this.childOp2};
    }

    @Override
    public void setChildren(OpIterator[] children) {
        this.childOp1 = children[0];
        this.childOp2 = children[1];
    }

}
